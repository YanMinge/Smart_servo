<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\app_servo_button.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\app_servo_button.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Dec 30 15:44:12 2016
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; parse_uart0_recv_buffer &rArr; response_product_query &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[29]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ACMP_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[c]">BOD_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[16]">Default_Handler</a> from startup_mini58series.o(.text) referenced 12 times from startup_mini58series.o(RESET)
 <LI><a href="#[e]">EINT0_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[f]">EINT1_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[13]">FB_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[10]">GPIO01_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[11]">GPIO234_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1a]">GPIO5_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1b]">HIRC_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[21]">Hard_Fault_Handler</a> from retarget.o(i.Hard_Fault_Handler) referenced from retarget.o(.emb_text)
 <LI><a href="#[1c]">I2C0_IRQHandler</a> from interrupt.o(i.I2C0_IRQHandler) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from interrupt.o(i.I2C1_IRQHandler) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1f]">PDWU_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[12]">PWM_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[27]">Reset_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[19]">SPI_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[14]">TMR0_IRQHandler</a> from interrupt.o(i.TMR0_IRQHandler) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[15]">TMR1_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[17]">UART0_IRQHandler</a> from interrupt.o(i.UART0_IRQHandler) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[18]">UART1_IRQHandler</a> from interrupt.o(i.UART1_IRQHandler) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[28]">__main</a> from __main.o(!!!main) referenced from startup_mini58series.o(.text)
 <LI><a href="#[24]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[23]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[25]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[26]">sysex_message_process</a> from main.o(i.sysex_message_process) referenced from main.o(i.init_block)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[49]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[31]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[36]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[af]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[33]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[35]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[37]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; parse_uart0_recv_buffer &rArr; response_product_query &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mini58series.o(.text))

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIO01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIO234_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>HIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PDWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mini58series.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3e]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[40]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_product_query
</UL>

<P><STRONG><a name="[4a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[4b]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[30]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[44]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[32]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[45]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[46]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[47]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[78]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_test_response
</UL>

<P><STRONG><a name="[9f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_product_query
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rgb_led
</UL>

<P><STRONG><a name="[c6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[41]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[23]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[42]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[34]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[39]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ca]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[cb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>CLK_DisablePLL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(i.CLK_DisablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[5f]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_write
</UL>

<P><STRONG><a name="[50]"></a>CLK_EnablePLL</STRONG> (Thumb, 528 bytes, Stack size 72 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[57]"></a>CLK_SetCoreClock</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[58]"></a>CLK_SetHCLK</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[60]"></a>CLK_SetModuleClock</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[52]"></a>CLK_WaitClockReady</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_SetMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[21]"></a>Hard_Fault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[1c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, interrupt.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, interrupt.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C_ClearTimeoutFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_ClearTimeoutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>PWM_ConfigOutputChannel</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, pwm.o(i.PWM_ConfigOutputChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWM_ConfigOutputChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_write
</UL>

<P><STRONG><a name="[7b]"></a>Pin2Addr</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mygpio.o(i.Pin2Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Pin2Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>

<P><STRONG><a name="[5d]"></a>SYS_Init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, sysinit.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>SYS_ResetCPU</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetCPU))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset_response
</UL>

<P><STRONG><a name="[61]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[62]"></a>SendChar_ToUART</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[59]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, system_mini58series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mini58series.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[64]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[63]"></a>TIMER_Open</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>

<P><STRONG><a name="[14]"></a>TMR0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.TMR0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TMR0_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sysinit.o(i.TMR0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR0_Init &rArr; TIMER_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_neuron_system
</UL>

<P><STRONG><a name="[17]"></a>UART0_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, interrupt.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, interrupt.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>UART_Function_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sysinit.o(i.UART_Function_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Function_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_neuron_system
</UL>

<P><STRONG><a name="[6b]"></a>UART_SetLine_Config</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, uart.o(i.UART_SetLine_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_SetLine_Config &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_neuron_system
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baudrate_response
</UL>

<P><STRONG><a name="[6d]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mygpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sysex_data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[48]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6c]"></a>add_sysex_data</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, protocol.o(i.add_sysex_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = add_sysex_data &rArr; sendlong
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendlong
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendbyte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShort
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFloat
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sysex_return_code
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sysex_error_code
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_firmware_version_response
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report_online
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report_offline
</UL>

<P><STRONG><a name="[80]"></a>digitalRead</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mygpio.o(i.digitalRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = digitalRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_data
</UL>

<P><STRONG><a name="[7a]"></a>digitalWrite</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, mygpio.o(i.digitalWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = digitalWrite &rArr; Pin2Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin2Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led
</UL>

<P><STRONG><a name="[4c]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[7c]"></a>flush_sysex_to_send</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, protocol.o(i.flush_sysex_to_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flush_sysex_to_send
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sysex_return_code
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sysex_error_code
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_firmware_version_response
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report_online
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report_offline
</UL>

<P><STRONG><a name="[89]"></a>flush_uart0_local_buffer</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, protocol.o(i.flush_uart0_local_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>flush_uart0_to_uart1</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, protocol.o(i.flush_uart0_to_uart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flush_uart0_to_uart1
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart1
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOffline
</UL>

<P><STRONG><a name="[88]"></a>flush_uart1_to_uart0</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, protocol.o(i.flush_uart1_to_uart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flush_uart1_to_uart0
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>get_sensor_data</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main.o(i.get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_sensor_data &rArr; digitalRead
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>init_block</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, main.o(i.init_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_block &rArr; set_rgb_led &rArr; pwm_write &rArr; PWM_ConfigOutputChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rgb_led
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_recv_attach
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>init_neuron_system</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sysinit.o(i.init_neuron_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = init_neuron_system &rArr; UART_SetLine_Config &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Function_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>init_sysex_to_send</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, protocol.o(i.init_sysex_to_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_sysex_to_send
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sysex_return_code
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sysex_error_code
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_firmware_version_response
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report_online
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report_offline
</UL>

<P><STRONG><a name="[38]"></a>main</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; parse_uart0_recv_buffer &rArr; response_product_query &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_neuron_system
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uart0_recv_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart1_to_uart0
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart0_local_buffer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report_online
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report_offline
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_block
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_data
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7f]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systime.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_data
</UL>

<P><STRONG><a name="[87]"></a>parse_uart0_recv_buffer</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, protocol.o(i.parse_uart0_recv_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = parse_uart0_recv_buffer &rArr; response_product_query &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_product_query
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOffline
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>pinMode</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mygpio.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pinMode &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_block
</UL>

<P><STRONG><a name="[98]"></a>pwm_write</STRONG> (Thumb, 746 bytes, Stack size 16 bytes, mygpio.o(i.pwm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pwm_write &rArr; PWM_ConfigOutputChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rgb_led
</UL>

<P><STRONG><a name="[77]"></a>read_next_sysex_data</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, protocol.o(i.read_next_sysex_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_next_sysex_data &rArr; send_sysex_error_code &rArr; add_sysex_data &rArr; sendlong
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sysex_error_code
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readlong
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfloat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbyte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readShort
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_len
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sysex_feedback_response
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rgb_led_response
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baudrate_response
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_test_response
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysex_message_process
</UL>

<P><STRONG><a name="[76]"></a>read_sysex_type</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, protocol.o(i.read_sysex_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = read_sysex_type
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sysex_feedback_response
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rgb_led_response
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baudrate_response
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_test_response
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysex_message_process
</UL>

<P><STRONG><a name="[8b]"></a>send_sensor_report_offline</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.send_sensor_report_offline))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_sensor_report_offline &rArr; add_sysex_data &rArr; sendlong
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sysex_to_send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_sysex_to_send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sysex_data
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>send_sensor_report_online</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.send_sensor_report_online))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_sensor_report_online &rArr; add_sysex_data &rArr; sendlong
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sysex_to_send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_sysex_to_send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sysex_data
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysex_message_process
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>send_sysex_error_code</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, protocol.o(i.send_sysex_error_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_sysex_error_code &rArr; add_sysex_data &rArr; sendlong
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sysex_to_send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_sysex_to_send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sysex_data
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_test_response
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysex_message_process
</UL>

<P><STRONG><a name="[91]"></a>send_sysex_return_code</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, protocol.o(i.send_sysex_return_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_sysex_return_code &rArr; add_sysex_data &rArr; sendlong
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sysex_to_send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_sysex_to_send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sysex_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
</UL>

<P><STRONG><a name="[85]"></a>set_led</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i.set_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_led &rArr; digitalWrite &rArr; Pin2Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysex_message_process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_block
</UL>

<P><STRONG><a name="[84]"></a>set_rgb_led</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, sysinit.o(i.set_rgb_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = set_rgb_led &rArr; pwm_write &rArr; PWM_ConfigOutputChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rgb_led_response
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_block
</UL>

<P><STRONG><a name="[5a]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = stackDump &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[26]"></a>sysex_message_process</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, main.o(i.sysex_message_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sysex_message_process &rArr; read_next_sysex_data &rArr; send_sysex_error_code &rArr; add_sysex_data &rArr; sendlong
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sysex_error_code
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sysex_type
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_led
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report_online
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_block)
</UL>
<P><STRONG><a name="[83]"></a>uart0_recv_attach</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, protocol.o(i.uart0_recv_attach))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_block
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[55]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, system_mini58series.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[16]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>assign_dev_id_response</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, protocol.o(i.assign_dev_id_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = assign_dev_id_response
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
</UL>

<P><STRONG><a name="[90]"></a>check_sysex_message</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, protocol.o(i.check_sysex_message))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
</UL>

<P><STRONG><a name="[75]"></a>communication_test_response</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, protocol.o(i.communication_test_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = communication_test_response &rArr; read_next_sysex_data &rArr; send_sysex_error_code &rArr; add_sysex_data &rArr; sendlong
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sysex_error_code
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sysex_type
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
</UL>

<P><STRONG><a name="[9a]"></a>data_len</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, protocol.o(i.data_len))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
</UL>

<P><STRONG><a name="[97]"></a>find_block_response</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol.o(i.find_block_response))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
</UL>

<P><STRONG><a name="[8d]"></a>processSysexMessageOffline</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocol.o(i.processSysexMessageOffline))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = processSysexMessageOffline &rArr; flush_uart0_to_uart1
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart0_to_uart1
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uart0_recv_buffer
</UL>

<P><STRONG><a name="[8c]"></a>processSysexMessageOnline</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, protocol.o(i.processSysexMessageOnline))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = processSysexMessageOnline &rArr; set_baudrate_response &rArr; UART_SetLine_Config &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sysex_return_code
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart0_to_uart1
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart0_local_buffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset_response
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sysex_feedback_response
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rgb_led_response
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baudrate_response
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_firmware_version_response
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_block_response
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_test_response
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sysex_message
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_dev_id_response
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uart0_recv_buffer
</UL>

<P><STRONG><a name="[93]"></a>query_firmware_version_response</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, protocol.o(i.query_firmware_version_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = query_firmware_version_response &rArr; add_sysex_data &rArr; sendlong
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sysex_to_send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_sysex_to_send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sysex_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
</UL>

<P><STRONG><a name="[9c]"></a>readShort</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, protocol.o(i.readShort))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readShort
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
</UL>

<P><STRONG><a name="[9b]"></a>readbyte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, protocol.o(i.readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
</UL>

<P><STRONG><a name="[9e]"></a>readfloat</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, protocol.o(i.readfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
</UL>

<P><STRONG><a name="[9d]"></a>readlong</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, protocol.o(i.readlong))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readlong
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
</UL>

<P><STRONG><a name="[8e]"></a>response_product_query</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, protocol.o(i.response_product_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = response_product_query &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uart0_recv_buffer
</UL>

<P><STRONG><a name="[71]"></a>sendFloat</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, protocol.o(i.sendFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sysex_data
</UL>

<P><STRONG><a name="[6f]"></a>sendShort</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, protocol.o(i.sendShort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendShort
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sysex_data
</UL>

<P><STRONG><a name="[6e]"></a>sendbyte</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, protocol.o(i.sendbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sysex_data
</UL>

<P><STRONG><a name="[70]"></a>sendlong</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, protocol.o(i.sendlong))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendlong
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sysex_data
</UL>

<P><STRONG><a name="[94]"></a>set_baudrate_response</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, protocol.o(i.set_baudrate_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_baudrate_response &rArr; UART_SetLine_Config &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sysex_type
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
</UL>

<P><STRONG><a name="[96]"></a>set_rgb_led_response</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, protocol.o(i.set_rgb_led_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_rgb_led_response &rArr; set_rgb_led &rArr; pwm_write &rArr; PWM_ConfigOutputChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rgb_led
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sysex_type
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
</UL>

<P><STRONG><a name="[95]"></a>set_sysex_feedback_response</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, protocol.o(i.set_sysex_feedback_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_sysex_feedback_response &rArr; read_next_sysex_data &rArr; send_sysex_error_code &rArr; add_sysex_data &rArr; sendlong
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sysex_type
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_next_sysex_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
</UL>

<P><STRONG><a name="[92]"></a>system_reset_response</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, protocol.o(i.system_reset_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_reset_response
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetCPU
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessageOnline
</UL>

<P><STRONG><a name="[73]"></a>write_byte_uart0</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, protocol.o(i.write_byte_uart0))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_sysex_to_send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_product_query
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_dev_id_response
</UL>

<P><STRONG><a name="[74]"></a>write_byte_uart1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, protocol.o(i.write_byte_uart1))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart0_to_uart1
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_sysex_to_send
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_dev_id_response
</UL>

<P><STRONG><a name="[69]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysinit.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Function_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>

<P><STRONG><a name="[68]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sysinit.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>

<P><STRONG><a name="[66]"></a>TIMER_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysinit.o(i.TIMER_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>

<P><STRONG><a name="[67]"></a>TIMER_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysinit.o(i.TIMER_Start))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>

<P><STRONG><a name="[54]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, clk.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[56]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
</UL>

<P><STRONG><a name="[24]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
