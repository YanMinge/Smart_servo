<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Neuron.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Neuron.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed May 04 10:20:04 2016
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART0_IRQHandler &rArr; Uart0_Handle &rArr; parse_gcommand &rArr; parse_mcode &rArr; cmd_get_servo_temperature &rArr; calculate_temp &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[19]">Default_Handler</a> from startup_m051series.o(.text) referenced 11 times from startup_m051series.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[a]">GPIOP0P1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[b]">GPIOP2P3P4_IRQHandler</a> from interrupt.o(i.GPIOP2P3P4_IRQHandler) referenced from startup_m051series.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[18]">I2C_IRQHandler</a> from interrupt.o(i.I2C_IRQHandler) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[c]">PWMA_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[d]">PWMB_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1a]">PWRWU_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[3f]">Reset_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[16]">SPI2_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[17]">SPI3_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1d]">SystemInit</a> from system_m051series.o(i.SystemInit) referenced from startup_m051series.o(.text)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from interrupt.o(i.TMR0_IRQHandler) referenced from startup_m051series.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from interrupt.o(i.UART0_IRQHandler) referenced from startup_m051series.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from interrupt.o(i.UART1_IRQHandler) referenced from startup_m051series.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m051series.o(.text)
 <LI><a href="#[20]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[1f]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[22]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[23]">assign_dev_id_response</a> from protocol.o(i.assign_dev_id_response) referenced from protocol.o(.constdata)
 <LI><a href="#[27]">cmd_test_response</a> from protocol.o(i.cmd_test_response) referenced from protocol.o(.constdata)
 <LI><a href="#[33]">infrared_send_response</a> from protocol.o(i.infrared_send_response) referenced from protocol.o(.constdata)
 <LI><a href="#[21]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[39]">laser_device_response</a> from protocol.o(i.laser_device_response) referenced from protocol.o(.constdata)
 <LI><a href="#[3c]">limit_switch_response</a> from protocol.o(i.limit_switch_response) referenced from protocol.o(.constdata)
 <LI><a href="#[1c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[31]">monochrome_led_response</a> from protocol.o(i.monochrome_led_response) referenced from protocol.o(.constdata)
 <LI><a href="#[34]">motor_dc_response</a> from protocol.o(i.motor_dc_response) referenced from protocol.o(.constdata)
 <LI><a href="#[36]">motor_encoder_response</a> from protocol.o(i.motor_encoder_response) referenced from protocol.o(.constdata)
 <LI><a href="#[37]">motor_servo_response</a> from protocol.o(i.motor_servo_response) referenced from protocol.o(.constdata)
 <LI><a href="#[35]">motor_step_response</a> from protocol.o(i.motor_step_response) referenced from protocol.o(.constdata)
 <LI><a href="#[3b]">mpu6050_response</a> from protocol.o(i.mpu6050_response) referenced from protocol.o(.constdata)
 <LI><a href="#[2f]">pwm_rgb_led_response</a> from protocol.o(i.pwm_rgb_led_response) referenced from protocol.o(.constdata)
 <LI><a href="#[2e]">read_analog_response</a> from protocol.o(i.read_analog_response) referenced from protocol.o(.constdata)
 <LI><a href="#[2d]">read_digital_response</a> from protocol.o(i.read_digital_response) referenced from protocol.o(.constdata)
 <LI><a href="#[2b]">report_analog_response</a> from protocol.o(i.report_analog_response) referenced from protocol.o(.constdata)
 <LI><a href="#[2a]">report_digital_response</a> from protocol.o(i.report_digital_response) referenced from protocol.o(.constdata)
 <LI><a href="#[3d]">rtc_clock_response</a> from protocol.o(i.rtc_clock_response) referenced from protocol.o(.constdata)
 <LI><a href="#[32]">segment_dis_response</a> from protocol.o(i.segment_dis_response) referenced from protocol.o(.constdata)
 <LI><a href="#[26]">set_baud_rate</a> from protocol.o(i.set_baud_rate) referenced from protocol.o(.constdata)
 <LI><a href="#[2c]">set_pin_mode_response</a> from protocol.o(i.set_pin_mode_response) referenced from protocol.o(.constdata)
 <LI><a href="#[25]">shake_hand_response</a> from protocol.o(i.shake_hand_response) referenced from protocol.o(.constdata)
 <LI><a href="#[3e]">smart_servo_cmd_process</a> from protocol.o(i.smart_servo_cmd_process) referenced from protocol.o(.constdata)
 <LI><a href="#[24]">system_reset_response</a> from protocol.o(i.system_reset_response) referenced from protocol.o(.constdata)
 <LI><a href="#[3a]">temperature_18b20_response</a> from protocol.o(i.temperature_18b20_response) referenced from protocol.o(.constdata)
 <LI><a href="#[38]">voice_buzzer_tone_response</a> from protocol.o(i.voice_buzzer_tone_response) referenced from protocol.o(.constdata)
 <LI><a href="#[29]">write_analog_response</a> from protocol.o(i.write_analog_response) referenced from protocol.o(.constdata)
 <LI><a href="#[28]">write_digital_response</a> from protocol.o(i.write_digital_response) referenced from protocol.o(.constdata)
 <LI><a href="#[30]">ws2812_display_response</a> from protocol.o(i.ws2812_display_response) referenced from protocol.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[40]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[67]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ec]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ed]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ee]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ef]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3f]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_m051series.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIOP0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>strtok_r</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, strtok_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_servo_break
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_rgb_led
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_relative_pos
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_assign_dev_id
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_absolute_pos
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok$wrapper
</UL>

<P><STRONG><a name="[44]"></a>_strtok$wrapper</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtok_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>

<P><STRONG><a name="[d1]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_gcommand
</UL>

<P><STRONG><a name="[46]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_gcommand
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_position
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_speed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_position
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_voltage
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_current
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_speed
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_current
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_speed
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samrt_servo_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_position
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_voltage
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_current
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_position
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_servo_break
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_relative_pos
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_assign_dev_id
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_absolute_pos
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_rgb_led
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_speed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_relative_pos
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_voltage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_temperature
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_current
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_absolute_pos
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_position
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_speed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_relative_pos
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_absolute_pos
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_position
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_voltage
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_current
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__strtod_int</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[48]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[f8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[4a]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[53]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[52]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[93]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[f9]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fa]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[21]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[6b]"></a>_scanf_really_real</STRONG> (Thumb, 586 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1f]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[fb]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ul2d</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[7a]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[6e]"></a>CLK_EnablePLL</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[79]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[73]"></a>CLK_SetCoreClock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[74]"></a>CLK_SetHCLK</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[7b]"></a>CLK_SetModuleClock</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[6f]"></a>CLK_WaitClockReady</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[b]"></a>GPIOP2P3P4_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, interrupt.o(i.GPIOP2P3P4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>GPIO_EnableInt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(i.GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_local_device
</UL>

<P><STRONG><a name="[d9]"></a>GPIO_SetMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[77]"></a>I2C_ClearTimeoutFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_ClearTimeoutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>I2C_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i.I2C_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>I2C_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, interrupt.o(i.I2C_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>Pin2Addr</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mygpio.o(i.Pin2Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Pin2Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>

<P><STRONG><a name="[78]"></a>SYS_Init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, sysinit.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>SYS_ResetModule</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[7c]"></a>SendErrorUart0</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, protocol.o(i.SendErrorUart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendErrorUart0 &rArr; uart0_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shake_hand_response
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_rate
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_test_response
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_dev_id_response
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_gcommand
</UL>

<P><STRONG><a name="[75]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_m051series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[1d]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_m051series.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[81]"></a>TIMER_Open</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>

<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.TMR0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TMR0_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sysinit.o(i.TMR0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR0_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UART0_IRQHandler &rArr; Uart0_Handle &rArr; parse_gcommand &rArr; parse_mcode &rArr; cmd_get_servo_temperature &rArr; calculate_temp &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>UART0_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_printf.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART0_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_rate
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>UART1_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_printf.o(i.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART1_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_rate
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>UART_Function_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sysinit.o(i.UART_Function_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Function_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_rate
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>UART_Open</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[8b]"></a>UART_SetLine_Config</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, uart.o(i.UART_SetLine_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_SetLine_Config &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baud_rate
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fc]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[fd]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[e9]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
</UL>

<P><STRONG><a name="[fe]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[64]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9f]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_writeMicroseconds
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_local_device
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ff]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[90]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[91]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[92]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[94]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[a2]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[100]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[101]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a3]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[6c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[99]"></a>adc_get_current_value</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, smartservo.o(i.adc_get_current_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_get_current_value &rArr; analogRead &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_data
</UL>

<P><STRONG><a name="[9b]"></a>adc_get_position_value</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, smartservo.o(i.adc_get_position_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_get_position_value &rArr; analogRead &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samrt_servo_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_neep_loop_in_sampling
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_data
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[9c]"></a>adc_get_temperature_value</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, smartservo.o(i.adc_get_temperature_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_get_temperature_value &rArr; analogRead &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_data
</UL>

<P><STRONG><a name="[9d]"></a>adc_get_voltage_value</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, smartservo.o(i.adc_get_voltage_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_get_voltage_value &rArr; analogRead &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_data
</UL>

<P><STRONG><a name="[9a]"></a>analogRead</STRONG> (Thumb, 304 bytes, Stack size 4 bytes, mygpio.o(i.analogRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = analogRead &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_pin_analog
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_voltage_value
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_temperature_value
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_position_value
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_current_value
</UL>

<P><STRONG><a name="[a1]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_servo_break
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_rgb_led
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_relative_pos
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_assign_dev_id
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_absolute_pos
</UL>

<P><STRONG><a name="[a4]"></a>calculate_current</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, smartservo.o(i.calculate_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = calculate_current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_current
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
</UL>

<P><STRONG><a name="[a5]"></a>calculate_temp</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, smartservo.o(i.calculate_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = calculate_temp &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_temperature
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
</UL>

<P><STRONG><a name="[a8]"></a>calculate_voltage</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, smartservo.o(i.calculate_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = calculate_voltage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_voltage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
</UL>

<P><STRONG><a name="[b9]"></a>device_neep_loop_in_sampling</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, protocol.o(i.device_neep_loop_in_sampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = device_neep_loop_in_sampling &rArr; pid_position_to_pwm &rArr; filter_position &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_led_blink
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_position_value
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_speed_update
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_led
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize_position_difference
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>digitalWrite</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, mygpio.o(i.digitalWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = digitalWrite &rArr; Pin2Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin2Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samrt_servo_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_local_device
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_break
</UL>

<P><STRONG><a name="[c0]"></a>filter_position</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, smartservo.o(i.filter_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = filter_position &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[d2]"></a>flush_uart0_forward_buffer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, protocol.o(i.flush_uart0_forward_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_gcommand
</UL>

<P><STRONG><a name="[c2]"></a>flush_uart0_local_buffer</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, protocol.o(i.flush_uart0_local_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = flush_uart0_local_buffer &rArr; millis &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>flush_uart1_forward_buffer</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, protocol.o(i.flush_uart1_forward_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = flush_uart1_forward_buffer &rArr; millis &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>get_sensor_data</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_sensor_data &rArr; adc_get_voltage_value &rArr; analogRead &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_voltage_value
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_temperature_value
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_position_value
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_current_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>init_local_device</STRONG> (Thumb, 508 bytes, Stack size 8 bytes, main.o(i.init_local_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = init_local_device &rArr; samrt_servo_init &rArr; smart_servo_led &rArr; pwm_write &rArr; map &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samrt_servo_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>is_pin_analog</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mygpio.o(i.is_pin_analog))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogRead
</UL>

<P><STRONG><a name="[a7]"></a>log</STRONG> (Thumb, 790 bytes, Stack size 80 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
</UL>

<P><STRONG><a name="[1c]"></a>main</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = main &rArr; motor_protection &rArr; calculate_temp &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_led_blink
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samrt_servo_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart1_forward_buffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart0_local_buffer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_neep_loop_in_sampling
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Function_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_local_device
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ce]"></a>map</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, mygpio.o(i.map))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = map &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_write
</UL>

<P><STRONG><a name="[c3]"></a>millis</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, systime.o(i.millis))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = millis &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_led_blink
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart1_forward_buffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart0_local_buffer
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>motor_protection</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, smartservo.o(i.motor_protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = motor_protection &rArr; calculate_temp &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_led_blink
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_voltage_value
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_temperature_value
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_current_value
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_break
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_voltage
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_current
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>normalize_position_difference</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, smartservo.o(i.normalize_position_difference))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_neep_loop_in_sampling
</UL>

<P><STRONG><a name="[8d]"></a>parse_gcommand</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, protocol.o(i.parse_gcommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = parse_gcommand &rArr; parse_mcode &rArr; cmd_get_servo_temperature &rArr; calculate_temp &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart0_forward_buffer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorUart0
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Handle
</UL>

<P><STRONG><a name="[bc]"></a>pid_position_to_pwm</STRONG> (Thumb, 1462 bytes, Stack size 72 bytes, smartservo.o(i.pid_position_to_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pid_position_to_pwm &rArr; filter_position &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_position_value
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_distance_togo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_position
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_neep_loop_in_sampling
</UL>

<P><STRONG><a name="[c8]"></a>pinMode</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mygpio.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pinMode &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samrt_servo_init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_local_device
</UL>

<P><STRONG><a name="[8c]"></a>processSysexMessage</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, protocol.o(i.processSysexMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = processSysexMessage &rArr; SendErrorUart0 &rArr; uart0_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_uart0_forward_buffer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorUart0
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Handle
</UL>

<P><STRONG><a name="[ca]"></a>pwm_init</STRONG> (Thumb, 922 bytes, Stack size 16 bytes, mepwm.o(i.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pwm_init &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samrt_servo_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_local_device
</UL>

<P><STRONG><a name="[da]"></a>pwm_write</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, mepwm.o(i.pwm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pwm_write &rArr; map &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_writeMicroseconds
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cw
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_ccw
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_led
</UL>

<P><STRONG><a name="[db]"></a>pwm_writeMicroseconds</STRONG> (Thumb, 168 bytes, Stack size 4 bytes, mepwm.o(i.pwm_writeMicroseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pwm_writeMicroseconds &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_write
</UL>

<P><STRONG><a name="[e6]"></a>readFloat</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, protocol.o(i.readFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
</UL>

<P><STRONG><a name="[e5]"></a>readShort</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, protocol.o(i.readShort))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readShort
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
</UL>

<P><STRONG><a name="[e7]"></a>readbyte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, protocol.o(i.readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
</UL>

<P><STRONG><a name="[c7]"></a>samrt_servo_init</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, smartservo.o(i.samrt_servo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = samrt_servo_init &rArr; smart_servo_led &rArr; pwm_write &rArr; map &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_position_value
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_led
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_break
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_local_device
</UL>

<P><STRONG><a name="[dc]"></a>sendFloat</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, protocol.o(i.sendFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_speed
</UL>

<P><STRONG><a name="[dd]"></a>sendShort</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, protocol.o(i.sendShort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendShort
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_voltage
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_temp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_current
</UL>

<P><STRONG><a name="[cd]"></a>send_sensor_report</STRONG> (Thumb, 470 bytes, Stack size 8 bytes, protocol.o(i.send_sensor_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = send_sensor_report &rArr; send_smart_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_voltage
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_temp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_speed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_current
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>send_string</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart_printf.o(i.send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[e3]"></a>send_uart0_string</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, protocol.o(i.send_uart0_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = send_uart0_string
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
</UL>

<P><STRONG><a name="[bb]"></a>smart_led_blink</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, smartservo.o(i.smart_led_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = smart_led_blink &rArr; smart_servo_led &rArr; pwm_write &rArr; map &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_led
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_neep_loop_in_sampling
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>smart_servo_break</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smartservo.o(i.smart_servo_break))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smart_servo_break &rArr; digitalWrite &rArr; Pin2Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_servo_break
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samrt_servo_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_protection
</UL>

<P><STRONG><a name="[d6]"></a>smart_servo_distance_togo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, smartservo.o(i.smart_servo_distance_togo))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[b5]"></a>smart_servo_led</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, smartservo.o(i.smart_servo_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = smart_servo_led &rArr; pwm_write &rArr; map &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_rgb_led
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_led_blink
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samrt_servo_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_neep_loop_in_sampling
</UL>

<P><STRONG><a name="[b3]"></a>smart_servo_move</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, smartservo.o(i.smart_servo_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = smart_servo_move &rArr; smart_servo_move_to &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_relative_pos
</UL>

<P><STRONG><a name="[aa]"></a>smart_servo_move_to</STRONG> (Thumb, 846 bytes, Stack size 48 bytes, smartservo.o(i.smart_servo_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = smart_servo_move_to &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_distance_togo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_absolute_pos
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move
</UL>

<P><STRONG><a name="[bd]"></a>smart_servo_speed_update</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, smartservo.o(i.smart_servo_speed_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = smart_servo_speed_update &rArr; smart_servo_cw &rArr; pwm_write &rArr; map &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cw
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_ccw
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_neep_loop_in_sampling
</UL>

<P><STRONG><a name="[d8]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_position_to_pwm
</UL>

<P><STRONG><a name="[7d]"></a>uart0_printf</STRONG> (Thumb, 38 bytes, Stack size 88 bytes, protocol.o(i.uart0_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart0_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uart0_string
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shake_hand
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_servo_break
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_rgb_led
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_relative_pos
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_voltage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_temperature
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_speed
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_pos
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_current
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_assign_dev_id
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_absolute_pos
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorUart0
</UL>

<P><STRONG><a name="[ac]"></a>uart_printf</STRONG> (Thumb, 44 bytes, Stack size 160 bytes, uart_printf.o(i.uart_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = uart_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_string
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_assign_dev_id
</UL>

<P><STRONG><a name="[7e]"></a>write_byte_uart0</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, protocol.o(i.write_byte_uart0))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_voltage
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_temp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_speed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_current
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_dev_id_response
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uart0_string
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShort
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFloat
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorUart0
</UL>

<P><STRONG><a name="[a0]"></a>write_byte_uart1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, protocol.o(i.write_byte_uart1))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_dev_id_response
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_gcommand
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[71]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, system_m051series.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[19]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>assign_dev_id_response</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, protocol.o(i.assign_dev_id_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = assign_dev_id_response &rArr; SendErrorUart0 &rArr; uart0_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorUart0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>cmd_absolute_pos</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, protocol.o(i.cmd_absolute_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cmd_absolute_pos &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[ab]"></a>cmd_assign_dev_id</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, protocol.o(i.cmd_assign_dev_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cmd_assign_dev_id &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[ad]"></a>cmd_get_servo_current</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, protocol.o(i.cmd_get_servo_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cmd_get_servo_current &rArr; calculate_current &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_current
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[ae]"></a>cmd_get_servo_pos</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, protocol.o(i.cmd_get_servo_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_get_servo_pos &rArr; uart0_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[af]"></a>cmd_get_servo_speed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, protocol.o(i.cmd_get_servo_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_get_servo_speed &rArr; uart0_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[b0]"></a>cmd_get_servo_temperature</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, protocol.o(i.cmd_get_servo_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = cmd_get_servo_temperature &rArr; calculate_temp &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[b1]"></a>cmd_get_servo_voltage</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, protocol.o(i.cmd_get_servo_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cmd_get_servo_voltage &rArr; calculate_voltage &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_voltage
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[b2]"></a>cmd_relative_pos</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, protocol.o(i.cmd_relative_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cmd_relative_pos &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[b4]"></a>cmd_set_rgb_led</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, protocol.o(i.cmd_set_rgb_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cmd_set_rgb_led &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_led
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[b6]"></a>cmd_set_servo_break</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, protocol.o(i.cmd_set_servo_break))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cmd_set_servo_break &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_break
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[b8]"></a>cmd_shake_hand</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, protocol.o(i.cmd_shake_hand))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_shake_hand &rArr; uart0_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_mcode
</UL>

<P><STRONG><a name="[27]"></a>cmd_test_response</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, protocol.o(i.cmd_test_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cmd_test_response &rArr; SendErrorUart0 &rArr; uart0_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorUart0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>infrared_send_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.infrared_send_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>laser_device_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.laser_device_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>limit_switch_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.limit_switch_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>monochrome_led_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.monochrome_led_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>motor_dc_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.motor_dc_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>motor_encoder_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.motor_encoder_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>motor_servo_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.motor_servo_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>motor_step_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.motor_step_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>mpu6050_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.mpu6050_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>parse_mcode</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, protocol.o(i.parse_mcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = parse_mcode &rArr; cmd_get_servo_temperature &rArr; calculate_temp &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shake_hand
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_servo_break
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_rgb_led
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_relative_pos
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_voltage
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_temperature
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_speed
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_pos
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_servo_current
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_assign_dev_id
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_absolute_pos
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_gcommand
</UL>

<P><STRONG><a name="[2f]"></a>pwm_rgb_led_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.pwm_rgb_led_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>read_analog_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.read_analog_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>read_digital_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.read_digital_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>report_analog_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.report_analog_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>report_digital_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.report_digital_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>rtc_clock_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.rtc_clock_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>segment_dis_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.segment_dis_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>send_smart_current</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, protocol.o(i.send_smart_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = send_smart_current &rArr; sendShort
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShort
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report
</UL>

<P><STRONG><a name="[de]"></a>send_smart_pos</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, protocol.o(i.send_smart_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = send_smart_pos &rArr; sendShort
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShort
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report
</UL>

<P><STRONG><a name="[e0]"></a>send_smart_speed</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, protocol.o(i.send_smart_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = send_smart_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report
</UL>

<P><STRONG><a name="[df]"></a>send_smart_temp</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, protocol.o(i.send_smart_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = send_smart_temp &rArr; sendShort
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShort
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report
</UL>

<P><STRONG><a name="[e1]"></a>send_smart_voltage</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, protocol.o(i.send_smart_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = send_smart_voltage &rArr; sendShort
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_uart0
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendShort
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_cmd_process
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_report
</UL>

<P><STRONG><a name="[26]"></a>set_baud_rate</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, protocol.o(i.set_baud_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = set_baud_rate &rArr; SendErrorUart0 &rArr; uart0_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Function_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorUart0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>set_pin_mode_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.set_pin_mode_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>shake_hand_response</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocol.o(i.shake_hand_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = shake_hand_response &rArr; SendErrorUart0 &rArr; uart0_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorUart0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>smart_servo_cmd_process</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, protocol.o(i.smart_servo_cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = smart_servo_cmd_process &rArr; smart_servo_move &rArr; smart_servo_move_to &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_voltage
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_temp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_speed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_smart_current
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move_to
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_move
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_led
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_break
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbyte
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readShort
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFloat
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendErrorUart0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>system_reset_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.system_reset_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>temperature_18b20_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.temperature_18b20_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>voice_buzzer_tone_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.voice_buzzer_tone_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>write_analog_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.write_analog_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>write_digital_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.write_digital_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>ws2812_display_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(i.ws2812_display_response))
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>Uart0_Handle</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, interrupt.o(i.Uart0_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Uart0_Handle &rArr; parse_gcommand &rArr; parse_mcode &rArr; cmd_get_servo_temperature &rArr; calculate_temp &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSysexMessage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_gcommand
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>Uart1_Handle</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, interrupt.o(i.Uart1_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysinit.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Function_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>

<P><STRONG><a name="[e4]"></a>smart_servo_ccw</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, smartservo.o(i.smart_servo_ccw))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = smart_servo_ccw &rArr; pwm_write &rArr; map &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_speed_update
</UL>

<P><STRONG><a name="[e8]"></a>smart_servo_cw</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, smartservo.o(i.smart_servo_cw))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = smart_servo_cw &rArr; pwm_write &rArr; map &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_servo_speed_update
</UL>

<P><STRONG><a name="[72]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[70]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, clk.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[95]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8f]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[98]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[97]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[5f]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[68]"></a>_fp_value</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
